[user]
  email = haider1987@gmail.com
  name = Fidel Añó

[github]
  user = fidelab

[init]
    templatedir = ~/.git_template

[core]
  editor = vim
  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  branch = auto
  diff = auto
  status = auto
  ui = true
  pager = true

[push]
  default = current

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1

[alias]
  alias = "!git config -l | sed -n 's/^alias\\.//p'"

  # View the current working tree status
  s = status
  st = status
  stat = status

  # View the current working tree status using the short format
  ss = status -s

  # View log with pretty displaying
  l = log --graph --pretty=format:'%C(red)%h%C(yellow)%d%Creset %s %C(green)- %an, %ar%Creset'

  # View log with abbrev commits
  ll = log --stat --abbrev-commit

  # Count number of commits by authors
  cc = shortlog -s -n --all

  # Undo last commit
  undo = reset --mixed HEAD~1
  undo-soft = reset --soft HEAD~1
  undo-hard = reset --hard HEAD~1

  # Update, clean branches, cleanup unnecessary files and optimize the local repository
  cleanup = !git fetch --all && git fetch --tags && git remote prune origin && git pull --all && git gc

  # Cleanup plus removing untracked files and stash clear
  cleanup-complete = !git fetch && git remote prune origin && git pull --all && git gc && git clean -df && git stash clear

  # Clean git repository objects and pack and else (CHANGE unwanted_folder FOR THE PROPER FOLDER)
  repo-clean = !git filter-branch --index-filter 'git rm -r --cached --ignore-unmatch unwanted_folder' --prune-empty && git gc --aggressive --prune

  # Fetch all from remote repository
  fa = fetch --all

  # Pull all remote branches locally added
  pa = pull --all

  # Show diff as a patch
  show-patch = format-patch --stdout -1

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Get the current branch name (not so useful in itself, but used in other aliases)
  branch-name = !git rev-parse --abbrev-ref HEAD

  # Push the current branch to the remote origin, and set it to track the upstream branch
  publish = !git push -u origin $(git branch-name)

  # Delete the remote version of the current branch (danger, can delete remote branch)
  # unpublish = !git push origin :$(git branch-name)

[advice]
  statusHints = true

[mergetool]
  keepBackup = false

[diff]
  tool = meld
[cola]
	spellcheck = false
	savewindowsettings = true
